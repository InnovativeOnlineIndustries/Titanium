import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
  repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
  }
}
plugins {
  id 'maven-publish'
  id 'org.cadixdev.licenser' version '0.6.1'
  id "com.matthewprenger.cursegradle" version "1.4.0"
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
  id "com.modrinth.minotaur" version "2.+"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

version = "${minecraftVersion}-${project.api_version}"
if (System.getenv('BUILD_NUMBER') != null) {
  version += "-" + System.getenv('BUILD_NUMBER')
}
group = 'com.hrznstudio'
archivesBaseName = 'titanium'
def isReleaseBranch = System.getenv("GIT_BRANCH") == "1.20";

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

license {
  header = project.file('HEADER')
  ext {
    year = Calendar.getInstance().get(Calendar.YEAR)
    name = 'Horizon Studio'
    email = 'contact@hrznstudio.com'
    mod = 'Titanium'
  }
}

minecraft {
  mappings channel: 'official', version: '1.20.1'
  runs {
    client = {
      // recommended logging data for a userdev environment
      properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
      // recommended logging level for the console
      properties 'forge.logging.console.level': 'debug'
      workingDirectory project.file('run').canonicalPath
      mods {
        titanium {
          source sourceSets.main
        }
      }
    }
    server = {
      // recommended logging data for a userdev environment
      properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
      // recommended logging level for the console
      properties 'forge.logging.console.level': 'debug'
      workingDirectory project.file('run').canonicalPath
      mods {
        titanium {
          source sourceSets.main
        }
      }
    }
    data {
      workingDirectory project.file('run')
      property 'forge.logging.console.level', 'info'
      args '--mod', 'titanium', '--all', '--output', file('src/main/resources'), '--input', file('src/main/resources')
      mods {
        titanium {
          source sourceSets.main
        }
      }
    }
  }
  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

repositories {
  mavenCentral()
  maven {
    // location for JEI and Almost Unified
    url = 'https://maven.blamejared.com/'
    content {
      includeGroup "mezz.jei"
      includeGroup "com.almostreliable.mods"
    }
  }
  maven {
    url "https://maven.tterrag.com/"
  }
  maven {
    url 'https://www.dogforce-games.com/maven/'
  }
  maven {
    url = "https://www.cursemaven.com"
  }
}
dependencies {
  minecraft 'net.minecraftforge:forge:1.20.1-47.0.19'

  // compile against the JEI API but do not include it at runtime
  compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.1.0.19")
  compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.1.0.19")
  // at runtime, use the full JEI jar for Forge
  runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.1.0.19")
  // Almost Unified for compile time
  compileOnly fg.deobf("com.almostreliable.mods:almostunified-forge:1.19.2-0.3.4")

  //runtimeOnly fg.deobf("curse.maven:functional-storage-556861:4324174")
  //runtimeOnly fg.deobf("curse.maven:industrial-foregoing-266515:4459182")
}

jar {
  manifest {
    attributes(["Specification-Title"     : project.name,
                "Specification-Vendor"    : "Horizon Studio",
                "Specification-Version"   : "2.0",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.api_version}",
                "Implementation-Vendor"   : "Horizon Studio",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Maven-Artifact"          : "${group}:${archivesBaseName}:${version}",
                "ModSide"                 : "BOTH",
                "Automatic-Module-Name"   : "com.hrznstdio.titanium"
    ],)

  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task deobfJar(type: Jar) {
  from sourceSets.main.output
  classifier 'deobf'
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives deobfJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
      artifact sourcesJar
      artifact javadocJar
      artifact deobfJar
    }
  }
  repositories {
    if (isReleaseBranch) {
      maven {
        url "file://" + System.getenv("local_maven")
      }
    } else {
      mavenLocal()
    }
  }
}

tasks.curseforge.enabled = System.env["CURSE_API"] != null

curseforge {
  if (System.env["CURSE_API"] != null) {
    apiKey = System.env["CURSE_API"]
  }
  project {
    id = '287342'
    changelog = "https://github.com/InnovativeOnlineIndustries/Titanium/blob/changelog/CHANGELOG.md"
    changelogType = 'markdown'
    releaseType = 'beta'
    addGameVersion '1.20.1'
    mainArtifact(jar) {

    }
    addArtifact sourcesJar
    addArtifact deobfJar
    addArtifact javadocJar
  }
}

tasks.modrinth.enabled = System.env["MODRINTH_TOKEN"] != null

modrinth {
  token = System.getenv("MODRINTH_TOKEN")
  // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
  projectId = "1Ro7m06l" // This can be the project ID or the slug. Either will work!
  versionType = "beta" // This is the default -- can also be `beta` or `alpha`
  uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
  gameVersions = ["1.20.1"] // Must be an array, even with only one version
  loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
  dependencies { // A special DSL for creating dependencies

  }
  changelog = "https://github.com/InnovativeOnlineIndustries/Titanium/blob/changelog/CHANGELOG.md"
}


task makeChangelog(type: GitChangelogTask) {
  //fromRepo = file("../../home/runner/work/Titanium/Titanium")
  file = new File("CHANGELOG.md")
  untaggedName = "Version ${project.version}"
  fromCommit = "6a5a3df3665643ea181873312e3801db7c662686"
  fromRef = "refs/tags/2.4.0"
  toRef = "1.20"
  templateContent = file("changelog.mustache").getText("UTF-8")
}
