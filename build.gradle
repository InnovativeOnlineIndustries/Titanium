buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'maven-publish'
    id 'net.minecrell.licenser' version '0.4.1'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

//def BUILD_NUMBER = System.getenv("COMMIT") ? "${project.api_version}-${System.getenv("COMMIT")}-SNAPSHOT" : "${project.api_version}"
version = "${minecraft_version}-${project.api_version}"
group = 'com.hrznstudio'
archivesBaseName = 'titanium'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

license {
    header = project.file('HEADER')
    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
        name = 'Horizon Studio'
        email = 'contact@hrznstudio.com'
        mod = 'Titanium'
    }
}

minecraft {
    mappings channel: 'snapshot', version: mappings_version
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            args '--mod', 'titanium', '--all', '--output', file('src/main/resources'), '--input', file('src/main/resources')
            source sourceSets.main
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
        // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")


}

jar {
    manifest {
        attributes(["Specification-Title": project.name,
                    "Specification-Vendor": "Horizon Studio",
                    "Specification-Version": "2.0",
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${project.api_version}",
                    "Implementation-Vendor" :"Horizon Studio",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Maven-Artifact": "${group}:${archivesBaseName}:${version}",
                    "ModSide": "BOTH",
        ],)

    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task deobfJar(type:Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            artifact deobfJar
        }
    }
    repositories {
        if(System.getenv("BRANCH") == "release" || System.getenv("BRANCH") == "release-1.15") {
            maven {
                url "s3://cdn.hrzn.studio/maven"
                authentication {
                    awsIm(AwsImAuthentication)
                }
            }
        } else {
            mavenLocal()
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.15'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion': '1.14'
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}
